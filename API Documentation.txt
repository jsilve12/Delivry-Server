Introduction
	This API Documentation will be laid out in the following way. The Base level of indentation will be the new folders. The second level will be the specific pages, and the third level will be specific notes on the pages, including what information needs to be sent, the filepath and what is returned. Unless otherwise specified information will be sent by Post request and returned on a JSON only page. The array sending the information will be named 'response'. All errors are sent to response['error'], and successful results are sent to response['success'].
	To use the server for testing a bogus website will be created, and you'll have to use that website name followed by the filepath. For instance if you want to get the file in order to accept orders and the website url is abcde.com, you'd use abcde.com/Order/Accept.php . I recommend having a variable to use as a placeholder for the website url, and then specifying the rest of the path normally.
	All Web pages, except for Login/Create.php require you to include the email and password (Which must be salted and hashed except on the Login page, where it can be plain text). If you don't, you'll get an error ("User not found"). I'll list that under required, but not under error.

Autocomplete
	Item.php
		Requires: email, password (Must be salted and hashed), item (partial or full item name), num_results (number of suggestions wanted)
		Returns: Suggestions based off of the item name given for what the item could be.
		Errors: "Error retrieving information from the database"

	Store.php
		Requires: email, password (Must be salted and hashed), name (partial or full store name), num_results (number of results wanted)
		Returns: Autofill results for store based on the current input
		Errors: "SQL Error"

Login
	Address.php
		Requires: email, password (Must be salted and hashed), address (address the user normally wants used), longitude, latitude
		Returns: a message the says "Success"
		Effects: Enters the address into the database
		Errors: "SQL entered improperly"

	Create.php
		Requires: name, email, salt (Random string you must generate), password
		Returns: a message that says "Account created"
		Effects: Creates account in the database, and sends an email to the given email, saying the account was created.
		Errors: "A field was missing", "Email needs to contain an @ sign", "Unknown error submitting to database"

	Login.php
		Requires: email, password
		Returns: $user is a key-value array. 'user' contains the email and 'pass' contains the salted and hashed password.
		Effects: Logs the user in
		Errors: "No entered password", "There is no user associated with that email account", "Incorrect Password", "SQL error"

	Reset_Ask.php
		Requires: email
		Returns: Message saying "Sent a reset email"
		Effects: Sends a reset email
		Errors:"User not found", "SQL error"

	Reset_Grant.php
		Requires: email, temp_pass, password
		Returns: Message saying success
		Effects: Changes the password to the new password
		Errors: "User doesn't exist", "User doesn't need a password reset", "Thats the incorrect temporary password", "SQL error"

Order
	Accept.php
		Requires: email, password (salted and hashed), order_id
		Returns: Message saying success
		Effects: Accepts an order with order id order_id on behalf of the current user.
		Errors:	"Order id not found", "SQL error", "Result set from database is empty"

	Amend.php
		NOTE: calling this function deletes all the items stored in the database. The items must be re-entered
		Requires: email, password (salted and hashed), order_id, variable names corresponding with the variables that you want changed
		Returns: Message saying success
		Effects: Amends any order which hasn't been accepted yet with the necessary information
		Errors: "Order can not be Amended" (It's been accepted), SQL error

	Cancel_Accept.php
		NOTE: Only doable when in the Accepted category
		Requires: email, password (salted and hashed), order_id
		Returns: Message saying success
		Effects: Moves the order from the accepted to placed category (back a step)
		Errors: "SQL error"

	Cancel_Placed.php
		NOTE: Only doable when in the Placed category
		Requires: email, password (salted and hashed), order_id
		Returns: success
		Effects: Deletes the entry
		Errors: "SQL error", "That entry doesn't exist"

	Finish.php
		NOTE: Only doable when in the Accepted category
		Requires: email, password (salted and hashed), order_id, price, receipt_name (the filename of the receipt), receipt (this will be an image of the receipt)
		Returns: success
		Effects: Moves the order to Finished
		Errors: "SQL error", "Order  not found"

	My_Orders.php
		Requires: email, password (salted and hashed), people_id
		Returns: success
		Effects: Returns all of a persons orders
		Errors: "Error with fetching the orders placed", "Error with fetching the orders accepted", "Error with fetching the orders finished", "Error with fetching the orders conflicts"

	Place.php
		Requires: email, password (salted and hashed), items (should be a key value array of names => descriptions), address, addr_desc (address description), long, lat, store
		Returns: success
		Effects: Enters a new entry into the database
		Errors: "Missing a variable", "SQL error",

	Standing.php
		Requires: email, password (salted and hashed), long, lat, diff (total distance range you want included, (optional) store
		Returns: An array of orders
		Effects: Returns all the orders that placed in a certain area, with an optional filter to limit the responses to a certain store.
		Errors: "Longitude or Latitude are missing", "SQL error"


TODO: Delete account, file complaint, verify order received, send emails, send/receive payment, enter order receipt into database, accept projected prices from users, miles2degrees function, Autofill location, Autofill price
